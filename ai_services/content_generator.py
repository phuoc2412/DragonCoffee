"""
Dragon Coffee Shop - Content Generator
This module generates marketing content, product descriptions, and promotional materials.
"""

import random
import re
import numpy as np
from datetime import datetime, timedelta
import os
import json

# Try to use OpenAI if available, or fall back to rule-based generation
try:
    from openai import OpenAI
    openai_available = True
except ImportError:
    openai_available = False

class ContentGenerator:
    def __init__(self):
        """Initialize content generator"""
        # Templates directory
        self.templates_dir = 'ai_services/data'
        os.makedirs(self.templates_dir, exist_ok=True)
        
        # Load templates
        self.templates = self.load_templates()
        
        # Initialize OpenAI client if available
        self.openai_client = None
        if openai_available:
            try:
                api_key = os.environ.get('OPENAI_API_KEY')
                if api_key:
                    self.openai_client = OpenAI(api_key=api_key)
            except Exception as e:
                print(f"Error initializing OpenAI client: {e}")
    
    def load_templates(self):
        """Load content templates from file or create defaults"""
        templates_path = os.path.join(self.templates_dir, 'content_templates.json')
        
        if os.path.exists(templates_path):
            try:
                with open(templates_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return self.create_default_templates()
        else:
            return self.create_default_templates()
    
    def create_default_templates(self):
        """Create default content templates"""
        templates = {
            'product_description': [
                "Th∆∞·ªüng th·ª©c {product_name}, m·ªôt {adjective} ƒë·ªì u·ªëng {unique_quality} c·ªßa Dragon Coffee. {flavor_profile} v·ªõi {texture} tuy·ªát v·ªùi, ƒë√¢y l√† s·ª± l·ª±a ch·ªçn ho√†n h·∫£o cho {occasion}.",
                "{product_name} c·ªßa ch√∫ng t√¥i l√† s·ª± k·∫øt h·ª£p {adjective} gi·ªØa {ingredient} v√† {ingredient2}, t·∫°o n√™n h∆∞∆°ng v·ªã {flavor_profile} kh√¥ng th·ªÉ qu√™n. Th∆∞·ªüng th·ª©c {serving_suggestion} ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t.",
                "Kh√°m ph√° {product_name} - {adjective} ƒë·ªì u·ªëng {origin} v·ªõi {unique_quality}. {product_name} ƒë∆∞·ª£c ph·ª•c v·ª• {serving_suggestion}, mang ƒë·∫øn tr·∫£i nghi·ªám {sensation} cho gi√°c quan c·ªßa b·∫°n."
            ],
            'promotion_announcement': [
                "üî• KHUY·∫æN M√ÉI ƒê·∫∂C BI·ªÜT! üî•\nT·ª´ {start_date} ƒë·∫øn {end_date}, t·∫≠n h∆∞·ªüng {discount}% cho {product_name}. {promotion_details}. Ch·ªâ c√≥ t·∫°i Dragon Coffee! #DragonSpecial",
                "‚ö°Ô∏è ∆ØU ƒê√ÉI SHOCK! ‚ö°Ô∏è\n{promotion_name} ƒë√£ tr·ªü l·∫°i! {discount}% cho {product_category} t·ª´ {start_date}. {promotion_details}. ƒê·ª´ng b·ªè l·ª°!",
                "üéâ DEAL HOT! üéâ\nMua {product_name}, t·∫∑ng {free_item}! Ch∆∞∆°ng tr√¨nh {promotion_details} ch·ªâ di·ªÖn ra t·ª´ {start_date} ƒë·∫øn {end_date}. Gh√© ngay Dragon Coffee!"
            ],
            'social_media_post': [
                "‚òï B·∫°n ƒë√£ th·ª≠ {product_name} ch∆∞a? {adjective} ƒë·ªì u·ªëng n√†y s·∫Ω {benefit} v√† {benefit2}! Gh√© Dragon Coffee ngay h√¥m nay v√† ƒë∆∞·ª£c gi·∫£m {discount}% khi check-in! #DragonCoffee #CoffeeLovers",
                "üåü {adjective} bu·ªïi s√°ng b·∫Øt ƒë·∫ßu v·ªõi {product_name}! {product_description} H√¥m nay ch√∫ng t√¥i c√≥ ch∆∞∆°ng tr√¨nh {promotion_details}. ƒê·ª´ng b·ªè l·ª°! #MorningBoost #DragonCoffee",
                "‚ú® Tr·∫£i nghi·ªám m·ªõi t·∫°i Dragon Coffee! {product_name} ƒë√£ tr·ªü l·∫°i v·ªõi {unique_quality}. {product_description} Gh√© thƒÉm ch√∫ng t√¥i v√† chia s·∫ª c·∫£m nh·∫≠n c·ªßa b·∫°n! #NewExperience #DragonTaste"
            ],
            'email_newsletter': [
                "Ch√†o {customer_first_name},\n\nCh√∫ng t√¥i r·∫•t vui ƒë∆∞·ª£c chia s·∫ª v·ªÅ {product_name} m·ªõi c·ªßa Dragon Coffee! {product_description}\n\nT·ª´ {start_date} ƒë·∫øn {end_date}, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c {discount}% khi ƒë·∫∑t h√†ng online. Ch·ªâ c·∫ßn s·ª≠ d·ª•ng m√£: {promo_code}.\n\n{promotion_details}\n\nCh√∫c b·∫°n m·ªôt ng√†y tuy·ªát v·ªùi,\nƒê·ªôi ng≈© Dragon Coffee",
                "Th√¢n g·ª≠i {customer_first_name},\n\nB·∫°n ƒë√£ s·∫µn s√†ng cho {season} c√πng Dragon Coffee ch∆∞a? Ch√∫ng t√¥i v·ª´a ra m·∫Øt {product_name} - {product_description}\n\nƒê·∫∑c bi·ªát, kh√°ch h√†ng th√¢n thi·∫øt nh∆∞ b·∫°n s·∫Ω ƒë∆∞·ª£c {discount}% khi s·ª≠ d·ª•ng m√£: {promo_code} t·ª´ {start_date}.\n\n{promotion_details}\n\nC·∫£m ∆°n v√¨ ƒë√£ lu√¥n ƒë·ªìng h√†nh c√πng ch√∫ng t√¥i,\nDragon Coffee",
                "Ch√†o {customer_first_name},\n\nCh√∫ng t√¥i nh·ªõ r·∫±ng b·∫°n y√™u th√≠ch {previous_order}. V√¨ v·∫≠y, ch√∫ng t√¥i mu·ªën gi·ªõi thi·ªáu v·ªõi b·∫°n {product_name} m·ªõi c·ªßa ch√∫ng t√¥i!\n\n{product_description}\n\nH√¥m nay, b·∫°n c√≥ th·ªÉ d√πng m√£: {promo_code} ƒë·ªÉ ƒë∆∞·ª£c gi·∫£m {discount}% cho ƒë∆°n h√†ng ti·∫øp theo.\n\n{promotion_details}\n\nC·∫£m ∆°n v√¨ ƒë√£ ch·ªçn Dragon Coffee,\nƒê·ªôi ng≈© Dragon Coffee"
            ],
            'blog_post': [
                "# {blog_title}\n\n*{publication_date}*\n\n## Gi·ªõi thi·ªáu\n\n{intro_paragraph}\n\n## {product_name} - S·ª± k·∫øt h·ª£p ho√†n h·∫£o\n\n{product_description}\n\n## C√°ch th∆∞·ªüng th·ª©c t·ªët nh·∫•t\n\n{serving_suggestion}\n\n## K·∫øt lu·∫≠n\n\n{conclusion_paragraph}",
                "# {blog_title}\n\n*{publication_date}*\n\n![{product_name}](image_url)\n\n{intro_paragraph}\n\n## Ngu·ªìn g·ªëc c·ªßa {product_name}\n\n{origin_story}\n\n## H∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng\n\n{flavor_profile}\n\n## L·ª£i √≠ch s·ª©c kh·ªèe\n\n{health_benefits}\n\n## T·∫°i sao kh√°ch h√†ng y√™u th√≠ch {product_name}\n\n{testimonial}\n\n## K·∫øt lu·∫≠n\n\n{conclusion_paragraph}"
            ]
        }
        
        # Save templates
        templates_path = os.path.join(self.templates_dir, 'content_templates.json')
        try:
            with open(templates_path, 'w', encoding='utf-8') as f:
                json.dump(templates, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"Error saving templates: {e}")
        
        return templates
    
    def generate_product_description(self, product_data):
        """Generate a product description"""
        # Try OpenAI first if available
        if self.openai_client:
            try:
                openai_result = self.generate_with_openai(
                    "product_description", product_data
                )
                if openai_result:
                    return openai_result
            except Exception as e:
                print(f"Error using OpenAI for product description: {e}")
        
        # Fall back to template-based generation
        try:
            # Select a random template
            template = random.choice(self.templates['product_description'])
            
            # Add default values for missing fields
            defaults = {
                'product_name': product_data.get('name', 'ƒê·ªì u·ªëng ƒë·∫∑c bi·ªát'),
                'adjective': random.choice(['th∆°m ngon', 'tuy·ªát v·ªùi', 'ƒë·∫∑c bi·ªát', 'ƒë·ªôc ƒë√°o', 'h·∫•p d·∫´n']),
                'unique_quality': random.choice(['ƒë·ªôc ƒë√°o', 'ƒë·∫∑c tr∆∞ng', 'kh√≥ c∆∞·ª°ng', 'ƒë·∫≠m ƒë√†']),
                'flavor_profile': random.choice(['H∆∞∆°ng v·ªã ƒë·∫≠m ƒë√†', 'V·ªã ng·ªçt tinh t·∫ø', 'H∆∞∆°ng th∆°m quy·∫øn r≈©']),
                'texture': random.choice(['ƒë·ªô m·ªãn', 'b·ªçt kem', 's·ª± h√≤a quy·ªán', 'l·ªõp topping']),
                'occasion': random.choice(['bu·ªïi s√°ng tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng', 'gi√¢y ph√∫t th∆∞ gi√£n', 'cu·ªôc h·ªçp ƒë·∫ßu ng√†y']),
                'ingredient': random.choice(['h·∫°t c√† ph√™ Arabica', 'tr√† xanh th∆∞·ª£ng h·∫°ng', 's√¥-c√¥-la B·ªâ']),
                'ingredient2': random.choice(['s·ªØa t∆∞∆°i', 'kem t∆∞∆°i', 'caramel', 'b·∫°c h√†']),
                'serving_suggestion': random.choice(['n√≥ng', 'ƒë√°', 'v·ªõi b√°nh ng·ªçt', 'v√†o bu·ªïi s√°ng']),
                'origin': random.choice(['Vi·ªát Nam', '√Å ƒê√¥ng', 'truy·ªÅn th·ªëng', 'hi·ªán ƒë·∫°i']),
                'sensation': random.choice(['th∆∞ gi√£n', 's·∫£ng kho√°i', 'h√†i l√≤ng', 'kh√≥ qu√™n'])
            }
            
            # Merge provided data with defaults
            context = {**defaults, **product_data}
            
            # Fill template with context
            description = template
            for key, value in context.items():
                pattern = '{' + key + '}'
                description = description.replace(pattern, str(value))
            
            return description
        except Exception as e:
            print(f"Error generating product description: {e}")
            return f"Th∆∞·ªüng th·ª©c {product_data.get('name', 'ƒë·ªì u·ªëng ƒë·∫∑c bi·ªát')} t·∫°i Dragon Coffee."
    
    def generate_promotion(self, promotion_data):
        """Generate a promotion announcement"""
        # Try OpenAI first if available
        if self.openai_client:
            try:
                openai_result = self.generate_with_openai(
                    "promotion_announcement", promotion_data
                )
                if openai_result:
                    return openai_result
            except Exception as e:
                print(f"Error using OpenAI for promotion: {e}")
        
        # Fall back to template-based generation
        try:
            # Select a random template
            template = random.choice(self.templates['promotion_announcement'])
            
            # Format dates
            start_date = promotion_data.get('start_date')
            if isinstance(start_date, str):
                try:
                    start_date = datetime.strptime(start_date, '%Y-%m-%d').strftime('%d/%m/%Y')
                except:
                    start_date = start_date
            elif isinstance(start_date, datetime):
                start_date = start_date.strftime('%d/%m/%Y')
            
            end_date = promotion_data.get('end_date')
            if isinstance(end_date, str):
                try:
                    end_date = datetime.strptime(end_date, '%Y-%m-%d').strftime('%d/%m/%Y')
                except:
                    end_date = end_date
            elif isinstance(end_date, datetime):
                end_date = end_date.strftime('%d/%m/%Y')
            
            # Add default values for missing fields
            defaults = {
                'promotion_name': promotion_data.get('name', 'Khuy·∫øn m√£i ƒë·∫∑c bi·ªát'),
                'discount': promotion_data.get('discount_percent', '20'),
                'product_name': random.choice(['C√† ph√™ Dragon', 'Tr√† s·ªØa Ph∆∞·ª£ng Ho√†ng', 'Cappuccino R·ªìng V√†ng']),
                'product_category': random.choice(['t·∫•t c·∫£ ƒë·ªì u·ªëng', 'c√† ph√™', 'tr√†', 'ƒë·ªì u·ªëng ƒë·∫∑c bi·ªát']),
                'promotion_details': random.choice(['√Åp d·ª•ng cho m·ªçi chi nh√°nh', 'Ch·ªâ √°p d·ª•ng khi ƒë·∫∑t h√†ng online', 'Gi·ªõi h·∫°n 1 ly/kh√°ch h√†ng']),
                'start_date': start_date or 'h√¥m nay',
                'end_date': end_date or 'cu·ªëi th√°ng',
                'free_item': random.choice(['b√°nh quy', 'b√°nh ng·ªçt', 'upsize mi·ªÖn ph√≠', 'topping th√™m'])
            }
            
            # Merge provided data with defaults
            context = {**defaults, **promotion_data}
            
            # Fill template with context
            announcement = template
            for key, value in context.items():
                pattern = '{' + key + '}'
                announcement = announcement.replace(pattern, str(value))
            
            return announcement
        except Exception as e:
            print(f"Error generating promotion: {e}")
            return f"KHUY·∫æN M√ÉI! {promotion_data.get('discount_percent', '20')}% cho {promotion_data.get('name', 'ƒë·ªì u·ªëng')}. Ch·ªâ t·∫°i Dragon Coffee!"
    
    def generate_social_post(self, post_data):
        """Generate a social media post"""
        # Try OpenAI first if available
        if self.openai_client:
            try:
                openai_result = self.generate_with_openai(
                    "social_media_post", post_data
                )
                if openai_result:
                    return openai_result
            except Exception as e:
                print(f"Error using OpenAI for social post: {e}")
        
        # Fall back to template-based generation
        try:
            # Select a random template
            template = random.choice(self.templates['social_media_post'])
            
            # Add default values for missing fields
            defaults = {
                'product_name': post_data.get('product_name', 'ƒê·ªì u·ªëng Dragon'),
                'adjective': random.choice(['Tuy·ªát v·ªùi', 'Tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng', 'M·ªõi m·∫ª', 'Th∆∞ gi√£n']),
                'benefit': random.choice(['ƒë√°nh th·ª©c v·ªã gi√°c', 'ti·∫øp th√™m nƒÉng l∆∞·ª£ng', 'l√†m d·ªãu t√¢m h·ªìn']),
                'benefit2': random.choice(['mang ƒë·∫øn c·∫£m gi√°c s·∫£ng kho√°i', 't·∫°o c·∫£m h·ª©ng cho ng√†y m·ªõi', 'l√†m cu·ªôc s·ªëng th√™m th√∫ v·ªã']),
                'discount': random.choice(['10', '15', '20']),
                'product_description': post_data.get('product_description', 'ƒê·ªì u·ªëng ƒë·ªôc ƒë√°o v·ªõi h∆∞∆°ng v·ªã kh√≥ c∆∞·ª°ng.'),
                'promotion_details': random.choice(['mua 1 t·∫∑ng 1', 'gi·∫£m gi√° ƒë·∫∑c bi·ªát', 'qu√† t·∫∑ng b·∫•t ng·ªù']),
                'unique_quality': random.choice(['h∆∞∆°ng v·ªã m·ªõi', 'c√¥ng th·ª©c c·∫£i ti·∫øn', 'nguy√™n li·ªáu cao c·∫•p'])
            }
            
            # Merge provided data with defaults
            context = {**defaults, **post_data}
            
            # Fill template with context
            post = template
            for key, value in context.items():
                pattern = '{' + key + '}'
                post = post.replace(pattern, str(value))
            
            return post
        except Exception as e:
            print(f"Error generating social post: {e}")
            return f"‚òï Th∆∞·ªüng th·ª©c {post_data.get('product_name', 'ƒë·ªì u·ªëng Dragon')} t·∫°i Dragon Coffee! #DragonCoffee"
    
    def generate_email(self, email_data):
        """Generate an email newsletter"""
        # Try OpenAI first if available
        if self.openai_client:
            try:
                openai_result = self.generate_with_openai(
                    "email_newsletter", email_data
                )
                if openai_result:
                    return openai_result
            except Exception as e:
                print(f"Error using OpenAI for email: {e}")
        
        # Fall back to template-based generation
        try:
            # Select a random template
            template = random.choice(self.templates['email_newsletter'])
            
            # Format dates
            start_date = email_data.get('start_date')
            if isinstance(start_date, str):
                try:
                    start_date = datetime.strptime(start_date, '%Y-%m-%d').strftime('%d/%m/%Y')
                except:
                    start_date = start_date
            elif isinstance(start_date, datetime):
                start_date = start_date.strftime('%d/%m/%Y')
            
            end_date = email_data.get('end_date')
            if isinstance(end_date, str):
                try:
                    end_date = datetime.strptime(end_date, '%Y-%m-%d').strftime('%d/%m/%Y')
                except:
                    end_date = end_date
            elif isinstance(end_date, datetime):
                end_date = end_date.strftime('%d/%m/%Y')
            
            # Generate promo code if not provided
            promo_code = email_data.get('promo_code')
            if not promo_code:
                promo_code = f"DRAGON{random.randint(1000, 9999)}"
            
            # Add default values for missing fields
            defaults = {
                'customer_first_name': email_data.get('customer_name', 'Qu√Ω kh√°ch'),
                'product_name': email_data.get('product_name', 'ƒê·ªì u·ªëng Dragon ƒë·∫∑c bi·ªát'),
                'product_description': email_data.get('product_description', 'ƒê·ªì u·ªëng ƒë·ªôc ƒë√°o v·ªõi h∆∞∆°ng v·ªã kh√≥ c∆∞·ª°ng.'),
                'discount': email_data.get('discount', '15'),
                'promo_code': promo_code,
                'start_date': start_date or 'h√¥m nay',
                'end_date': end_date or 'cu·ªëi th√°ng',
                'promotion_details': email_data.get('promotion_details', 'Ch∆∞∆°ng tr√¨nh √°p d·ª•ng cho m·ªçi chi nh√°nh Dragon Coffee.'),
                'season': random.choice(['m√πa h√®', 'm√πa thu', 'm√πa ƒë√¥ng', 'm√πa xu√¢n']),
                'previous_order': random.choice(['C√† ph√™ Dragon', 'Tr√† s·ªØa Ph∆∞·ª£ng Ho√†ng', 'Cappuccino R·ªìng V√†ng'])
            }
            
            # Merge provided data with defaults
            context = {**defaults, **email_data}
            
            # Fill template with context
            email = template
            for key, value in context.items():
                pattern = '{' + key + '}'
                email = email.replace(pattern, str(value))
            
            return email
        except Exception as e:
            print(f"Error generating email: {e}")
            return f"Ch√†o {email_data.get('customer_name', 'Qu√Ω kh√°ch')},\n\nCh√∫ng t√¥i xin gi·ªõi thi·ªáu {email_data.get('product_name', 'ƒë·ªì u·ªëng m·ªõi')} t·∫°i Dragon Coffee.\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© Dragon Coffee"
    
    def generate_blog_post(self, blog_data):
        """Generate a blog post about a product"""
        # Try OpenAI first if available
        if self.openai_client:
            try:
                openai_result = self.generate_with_openai(
                    "blog_post", blog_data
                )
                if openai_result:
                    return openai_result
            except Exception as e:
                print(f"Error using OpenAI for blog post: {e}")
        
        # Fall back to template-based generation
        try:
            # Select a random template
            template = random.choice(self.templates['blog_post'])
            
            # Format publication date
            publication_date = blog_data.get('publication_date')
            if not publication_date:
                publication_date = datetime.now().strftime('%d/%m/%Y')
            elif isinstance(publication_date, datetime):
                publication_date = publication_date.strftime('%d/%m/%Y')
            
            # Generate blog title if not provided
            blog_title = blog_data.get('blog_title')
            if not blog_title:
                product_name = blog_data.get('product_name', 'ƒê·ªì u·ªëng Dragon')
                blog_title = f"Kh√°m ph√° {product_name}: H√†nh tr√¨nh h∆∞∆°ng v·ªã ƒë·∫∑c bi·ªát"
            
            # Add default values for missing fields
            defaults = {
                'blog_title': blog_title,
                'publication_date': publication_date,
                'product_name': blog_data.get('product_name', 'ƒê·ªì u·ªëng Dragon'),
                'intro_paragraph': blog_data.get('intro_paragraph', 
                    f"Dragon Coffee t·ª± h√†o gi·ªõi thi·ªáu {blog_data.get('product_name', 'ƒë·ªì u·ªëng ƒë·∫∑c bi·ªát')} - m·ªôt tr·∫£i nghi·ªám h∆∞∆°ng v·ªã ƒë·ªôc ƒë√°o m√† ch√∫ng t√¥i mu·ªën chia s·∫ª v·ªõi b·∫°n. Trong b√†i vi·∫øt n√†y, ch√∫ng t√¥i s·∫Ω kh√°m ph√° nh·ªØng ƒëi·ªÅu ƒë·∫∑c bi·ªát v·ªÅ s·∫£n ph·∫©m n√†y."),
                'product_description': blog_data.get('product_description', 
                    f"{blog_data.get('product_name', 'ƒê·ªì u·ªëng n√†y')} ƒë∆∞·ª£c ch·∫ø bi·∫øn t·ª´ nh·ªØng nguy√™n li·ªáu t∆∞∆°i ngon nh·∫•t, t·∫°o n√™n h∆∞∆°ng v·ªã ƒë·∫≠m ƒë√† v√† kh√≥ qu√™n. S·ª± k·∫øt h·ª£p tinh t·∫ø gi·ªØa c√°c th√†nh ph·∫ßn t·∫°o n√™n m·ªôt ƒë·ªì u·ªëng ho√†n h·∫£o cho m·ªçi th·ªùi ƒëi·ªÉm trong ng√†y."),
                'serving_suggestion': blog_data.get('serving_suggestion',
                    f"ƒê·ªÉ th∆∞·ªüng th·ª©c {blog_data.get('product_name', 'ƒë·ªì u·ªëng')} m·ªôt c√°ch tr·ªçn v·∫πn nh·∫•t, ch√∫ng t√¥i khuy√™n b·∫°n n√™n u·ªëng khi c√≤n n√≥ng/l·∫°nh. B·∫°n c√≥ th·ªÉ k·∫øt h·ª£p v·ªõi b√°nh ng·ªçt ho·∫∑c b√°nh m·∫∑n ƒë·ªÉ c√≥ tr·∫£i nghi·ªám ·∫©m th·ª±c tr·ªçn v·∫πn."),
                'conclusion_paragraph': blog_data.get('conclusion_paragraph',
                    f"H√£y gh√© thƒÉm Dragon Coffee ƒë·ªÉ th∆∞·ªüng th·ª©c {blog_data.get('product_name', 'ƒë·ªì u·ªëng ƒë·∫∑c bi·ªát')} v√† nhi·ªÅu l·ª±a ch·ªçn tuy·ªát v·ªùi kh√°c. Ch√∫ng t√¥i lu√¥n cam k·∫øt mang ƒë·∫øn cho kh√°ch h√†ng nh·ªØng tr·∫£i nghi·ªám ·∫©m th·ª±c tuy·ªát v·ªùi nh·∫•t."),
                'origin_story': blog_data.get('origin_story',
                    f"{blog_data.get('product_name', 'ƒê·ªì u·ªëng n√†y')} c√≥ ngu·ªìn g·ªëc t·ª´ nh·ªØng c√¥ng th·ª©c truy·ªÅn th·ªëng, ƒë∆∞·ª£c c·∫£i ti·∫øn b·ªüi c√°c barista t√†i nƒÉng c·ªßa Dragon Coffee. Ch√∫ng t√¥i ƒë√£ nghi√™n c·ª©u v√† ph√°t tri·ªÉn c√¥ng th·ª©c n√†y trong nhi·ªÅu th√°ng ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c h∆∞∆°ng v·ªã ho√†n h·∫£o."),
                'flavor_profile': blog_data.get('flavor_profile',
                    f"{blog_data.get('product_name', 'ƒê·ªì u·ªëng n√†y')} c√≥ h∆∞∆°ng v·ªã ƒë·∫≠m ƒë√†, v·ªõi notes c·ªßa chocolate v√† caramel. V·ªã ng·ªçt v·ª´a ph·∫£i k·∫øt h·ª£p v·ªõi ƒë·ªô ƒë·∫Øng tinh t·∫ø t·∫°o n√™n s·ª± c√¢n b·∫±ng ho√†n h·∫£o."),
                'health_benefits': blog_data.get('health_benefits',
                    "B√™n c·∫°nh h∆∞∆°ng v·ªã tuy·ªát v·ªùi, ƒë·ªì u·ªëng n√†y c√≤n cung c·∫•p nhi·ªÅu l·ª£i √≠ch cho s·ª©c kh·ªèe. C√°c th√†nh ph·∫ßn t·ª± nhi√™n gi√∫p tƒÉng c∆∞·ªùng nƒÉng l∆∞·ª£ng, c·∫£i thi·ªán t√¢m tr·∫°ng v√† h·ªó tr·ª£ h·ªá ti√™u h√≥a."),
                'testimonial': blog_data.get('testimonial',
                    '"T√¥i ho√†n to√†n b·ªã chinh ph·ª•c b·ªüi h∆∞∆°ng v·ªã ƒë·∫∑c bi·ªát n√†y. M·ªói ng√†y t√¥i ƒë·ªÅu gh√© Dragon Coffee ƒë·ªÉ th∆∞·ªüng th·ª©c." - M·ªôt kh√°ch h√†ng th√¢n thi·∫øt')
            }
            
            # Merge provided data with defaults
            context = {**defaults, **blog_data}
            
            # Fill template with context
            blog_post = template
            for key, value in context.items():
                pattern = '{' + key + '}'
                blog_post = blog_post.replace(pattern, str(value))
            
            return blog_post
        except Exception as e:
            print(f"Error generating blog post: {e}")
            return f"# {blog_data.get('blog_title', 'ƒê·ªì u·ªëng Dragon')}\n\nGi·ªõi thi·ªáu v·ªÅ {blog_data.get('product_name', 'ƒë·ªì u·ªëng ƒë·∫∑c bi·ªát')} t·∫°i Dragon Coffee."
    
    def generate_with_openai(self, content_type, data):
        """Generate content using OpenAI"""
        if not self.openai_client:
            return None
        
        try:
            # Map content types to prompts
            prompts = {
                "product_description": f"H√£y vi·∫øt m·ªôt m√¥ t·∫£ h·∫•p d·∫´n cho s·∫£n ph·∫©m {data.get('name', 'ƒë·ªì u·ªëng')} t·∫°i qu√°n c√† ph√™ Dragon Coffee. S·∫£n ph·∫©m c√≥ gi√° {data.get('price', '')}. ƒê√¢y l√† m·ªôt qu√°n c√† ph√™ v·ªõi ch·ªß ƒë·ªÅ r·ªìng ch√¢u √Å. Vi·∫øt b·∫±ng ti·∫øng Vi·ªát, ƒë·ªô d√†i kho·∫£ng 2-3 c√¢u.",
                
                "promotion_announcement": f"H√£y vi·∫øt m·ªôt th√¥ng b√°o khuy·∫øn m√£i h·∫•p d·∫´n cho {data.get('name', 'ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i')} t·∫°i qu√°n c√† ph√™ Dragon Coffee. Khuy·∫øn m√£i gi·∫£m {data.get('discount_percent', '20')}% v√† di·ªÖn ra t·ª´ {data.get('start_date', 'h√¥m nay')} ƒë·∫øn {data.get('end_date', 'cu·ªëi th√°ng')}. Vi·∫øt b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn v√† thu h√∫t, ph√π h·ª£p ƒëƒÉng tr√™n m·∫°ng x√£ h·ªôi.",
                
                "social_media_post": f"H√£y vi·∫øt m·ªôt b√†i ƒëƒÉng m·∫°ng x√£ h·ªôi ng·∫Øn g·ªçn, h·∫•p d·∫´n v·ªÅ {data.get('product_name', 's·∫£n ph·∫©m')} t·∫°i qu√°n c√† ph√™ Dragon Coffee. S·∫£n ph·∫©m c√≥ ƒë·∫∑c ƒëi·ªÉm: {data.get('product_description', 'ƒë·ªì u·ªëng ƒë·ªôc ƒë√°o')}. Vi·∫øt b·∫±ng ti·∫øng Vi·ªát, th√™m emoji ph√π h·ª£p v√† hashtag.",
                
                "email_newsletter": f"H√£y vi·∫øt m·ªôt email ng·∫Øn g·ª≠i ƒë·∫øn kh√°ch h√†ng {data.get('customer_name', 'qu√Ω kh√°ch')} ƒë·ªÉ gi·ªõi thi·ªáu v·ªÅ {data.get('product_name', 's·∫£n ph·∫©m m·ªõi')} t·∫°i qu√°n c√† ph√™ Dragon Coffee. Email c√≥ m√£ gi·∫£m gi√° {data.get('promo_code', 'DRAGON2023')} gi·∫£m {data.get('discount', '15')}%. Vi·∫øt b·∫±ng ti·∫øng Vi·ªát, l·ªãch s·ª± v√† chuy√™n nghi·ªáp.",
                
                "blog_post": f"H√£y vi·∫øt m·ªôt b√†i blog chi ti·∫øt v·ªÅ {data.get('product_name', 's·∫£n ph·∫©m')} t·∫°i qu√°n c√† ph√™ Dragon Coffee. B√†i vi·∫øt n√™n bao g·ªìm gi·ªõi thi·ªáu, m√¥ t·∫£ s·∫£n ph·∫©m, ngu·ªìn g·ªëc, h∆∞∆°ng v·ªã, v√† k·∫øt lu·∫≠n. H√£y vi·∫øt b·∫±ng ti·∫øng Vi·ªát, v·ªõi ƒë·ªãnh d·∫°ng Markdown, ƒë·ªô d√†i kho·∫£ng 300-500 t·ª´."
            }
            
            prompt = prompts.get(content_type)
            if not prompt:
                return None
            
            # Call OpenAI API
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",  # the newest OpenAI model is "gpt-4o" which was released May 13, 2024
                messages=[
                    {"role": "system", "content": "B·∫°n l√† m·ªôt chuy√™n gia marketing cho qu√°n c√† ph√™ Dragon Coffee, m·ªôt qu√°n c√† ph√™ v·ªõi phong c√°ch ch√¢u √Å v√† h√¨nh ·∫£nh r·ªìng. H√£y vi·∫øt n·ªôi dung marketing h·∫•p d·∫´n b·∫±ng ti·∫øng Vi·ªát."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500
            )
            
            return response.choices[0].message.content
        except Exception as e:
            print(f"Error generating content with OpenAI: {e}")
            return None


# Singleton instance
content_generator = None

def init_content_generator():
    """Initialize the content generator"""
    global content_generator
    content_generator = ContentGenerator()
    return content_generator

def generate_product_description(product_data):
    """Generate a product description"""
    if content_generator is None:
        init_content_generator()
    
    return content_generator.generate_product_description(product_data)

def generate_promotion(promotion_data):
    """Generate a promotion announcement"""
    if content_generator is None:
        init_content_generator()
    
    return content_generator.generate_promotion(promotion_data)

def generate_social_post(post_data):
    """Generate a social media post"""
    if content_generator is None:
        init_content_generator()
    
    return content_generator.generate_social_post(post_data)

def generate_email(email_data):
    """Generate an email newsletter"""
    if content_generator is None:
        init_content_generator()
    
    return content_generator.generate_email(email_data)

def generate_blog_post(blog_data):
    """Generate a blog post about a product"""
    if content_generator is None:
        init_content_generator()
    
    return content_generator.generate_blog_post(blog_data)